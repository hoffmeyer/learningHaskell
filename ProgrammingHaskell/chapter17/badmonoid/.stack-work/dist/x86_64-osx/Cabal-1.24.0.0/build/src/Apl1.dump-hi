
==================== FINAL INTERFACE ====================
2016-10-28 19:15:42.918351 UTC

interface badmonoid-0.1.0.0-3YopvbiNKYcLLby0BmpW8E:Apl1 [orphan module] 8001
  interface hash: 3829d443c269c6535b1de5632245bd3c
  ABI hash: bd557cb8ae26e2494906efcd47d7f3a8
  export-list hash: dccb283b70310464f755a76a7f0cb15a
  orphan hash: c53064e4700f471090e2964e7ed55d9e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Checkers
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck a3636f7c6b928d0bf1ca94109fdc4fa1
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Arbitrary ebeb363c254e09a95bc38189596e006a
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Checkers e0d1fc6bb6d597797528565b2c321b44
import  -/  checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Classes 6ba475dbb1cdf27b6e28fda28d649d94
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
b9cb7be2c72b67adcdc167189505db06
  $fArbitrarySum ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Sum a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Data.Monoid.Sum a)
                  (Apl1.$fArbitrarySum_$carbitrary @ a $dArbitrary)
                  (Apl1.$fArbitrarySum_$cshrink @ a $dArbitrary) -}
b24dd481081d8aeaafd096f40fec2d28
  $fArbitrarySum1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                   eta
                   eta1) -}
4fe905321a40c21a2820a966b294b436
  $fArbitrarySum_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Data.Monoid.Sum a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Apl1.$fArbitrarySum1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Data.Monoid.N:Sum[0] <a>_R))) -}
55f16f279c268ae7a4c4ebcfa3970a81
  $fArbitrarySum_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Data.Monoid.Sum a -> [Data.Monoid.Sum a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Data.Monoid.Sum a) ->
                 GHC.Types.[] @ (Data.Monoid.Sum a)) -}
a240b8ea690b141654a867dcaac79f80
  $fArbitraryZipList ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Control.Applicative.ZipList a)
  DFunId
  {- Arity: 1, Strictness: <L,U(U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Control.Applicative.ZipList a)
                  (Apl1.$fArbitraryZipList_$carbitrary @ a $dArbitrary)
                  (Apl1.$fArbitraryZipList_$cshrink @ a $dArbitrary) -}
0486db065b34329402df66282f7e38c0
  $fArbitraryZipList_$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Control.Applicative.ZipList a)
  {- Arity: 3,
     Strictness: <L,1*U(1*U,A)><L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Test.QuickCheck.Arbitrary.$fArbitrarySeq2
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Control.Applicative.N:ZipList[0] <a>_N))) -}
6b1b60ac26cd54089978892742d412d8
  $fArbitraryZipList_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Control.Applicative.ZipList a -> [Control.Applicative.ZipList a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Control.Applicative.ZipList a) ->
                 GHC.Types.[] @ (Control.Applicative.ZipList a)) -}
bb321a8daf4b595887fd0c438e9e7233
  $fEqPropZipList ::
    GHC.Classes.Eq a =>
    Test.QuickCheck.Checkers.EqProp (Control.Applicative.ZipList a)
  DFunId
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Apl1.$fEqPropZipList_$c=-=
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R Sym (Test.QuickCheck.Checkers.N:EqProp[0]
                               <Control.Applicative.ZipList a>_N)) -}
e0dc17c2055e5b04333dea9103aedbf4
  $fEqPropZipList_$c=-= ::
    GHC.Classes.Eq a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Control.Applicative.ZipList a)
                   (a' :: Control.Applicative.ZipList a) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case GHC.Classes.$fEq[]_$c==
                                  @ a
                                  $dEq
                                  a1 `cast` (Control.Applicative.N:ZipList[0] <a>_N)
                                  a' `cast` (Control.Applicative.N:ZipList[0] <a>_N) of wild {
                             GHC.Types.False -> Test.QuickCheck.Property.counterexample9
                             GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
f338f2c84caa31369cd1c1393ca846ba
  $fMonoidZipList ::
    GHC.Base.Monoid a =>
    GHC.Base.Monoid (Control.Applicative.ZipList a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dMonoid :: GHC.Base.Monoid a).
                  @ (Control.Applicative.ZipList a)
                  (Apl1.$fMonoidZipList_$cmempty @ a $dMonoid)
                  (Apl1.$fMonoidZipList_$cmappend @ a $dMonoid)
                  (Apl1.$fMonoidZipList_$cmconcat @ a $dMonoid) -}
e0a7899fd1597f5d69f06c376599d432
  $fMonoidZipList1 ::
    GHC.Base.Monoid a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (eta :: Control.Applicative.ZipList a)
                   (eta1 :: Control.Applicative.ZipList a) ->
                 let {
                   f :: a -> a -> a = GHC.Base.mappend @ a $dMonoid
                 } in
                 letrec {
                   go :: [a] -> [a] -> [a] {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [a]) (eta2 :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys
                       -> case eta2 of wild1 {
                            [] -> GHC.Types.[] @ a
                            : y1 ys1 -> GHC.Types.: @ a (f y y1) (go ys ys1) } }
                 } in
                 go
                   eta `cast` (Control.Applicative.N:ZipList[0] <a>_N)
                   eta1 `cast` (Control.Applicative.N:ZipList[0] <a>_N)) -}
da4b74f7885ab41ab893de167b7dd86c
  $fMonoidZipList2 :: GHC.Base.Monoid a => [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dMonoid :: GHC.Base.Monoid a) ->
                 let {
                   x :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec { xs :: [a] = GHC.Types.: @ a x xs } in xs) -}
842bc9e3ad0966adce7faf93853e646e
  $fMonoidZipList_$cmappend ::
    GHC.Base.Monoid a =>
    Control.Applicative.ZipList a
    -> Control.Applicative.ZipList a -> Control.Applicative.ZipList a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Apl1.$fMonoidZipList1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.Monoid a>_R
                 ->_R <Control.Applicative.ZipList a>_R
                 ->_R <Control.Applicative.ZipList a>_R
                 ->_R Sym (Control.Applicative.N:ZipList[0]) <a>_N) -}
c03a97aeb59e35936eff9d24f57b6280
  $fMonoidZipList_$cmconcat ::
    GHC.Base.Monoid a =>
    [Control.Applicative.ZipList a] -> Control.Applicative.ZipList a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(1*U,U,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (eta :: [Control.Applicative.ZipList a]) ->
                 let {
                   x :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec {
                   xs :: [a] = GHC.Types.: @ a x xs
                 } in
                 letrec {
                   go :: [Control.Applicative.ZipList a]
                         -> Control.Applicative.ZipList a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Control.Applicative.ZipList a]) ->
                     case ds of wild {
                       [] -> xs `cast` (Sym (Control.Applicative.N:ZipList[0]) <a>_N)
                       : y ys
                       -> (Apl1.$fMonoidZipList1 @ a $dMonoid y (go ys))
                            `cast`
                          (Sym (Control.Applicative.N:ZipList[0]) <a>_N) }
                 } in
                 go eta) -}
967d29976068f322369064ad876fd61c
  $fMonoidZipList_$cmempty ::
    GHC.Base.Monoid a => Control.Applicative.ZipList a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Apl1.$fMonoidZipList2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.Monoid a>_R
                 ->_R Sym (Control.Applicative.N:ZipList[0]) <a>_N) -}
322855682b56eb6075d609b99f17d413
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Apl1.$trModule2 Apl1.$trModule1) -}
af5d5fd4370be7d57569422960eb9117
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Apl1"#) -}
bb3d4683fe8a5552352831b7a5209d5b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "badmonoid-0.1.0.0-3YopvbiNKYcLLby0BmpW8E"#) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Data.Monoid.Sum]
  = Apl1.$fArbitrarySum
instance Test.QuickCheck.Arbitrary.Arbitrary [Control.Applicative.ZipList]
  = Apl1.$fArbitraryZipList
instance Test.QuickCheck.Checkers.EqProp [Control.Applicative.ZipList]
  = Apl1.$fEqPropZipList
instance GHC.Base.Monoid [Control.Applicative.ZipList]
  = Apl1.$fMonoidZipList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

