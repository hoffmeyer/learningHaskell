
==================== FINAL INTERFACE ====================
2016-10-10 18:49:38.735924 UTC

interface main@main:Main 8001
  interface hash: 22ec15201d5a0f95efebf5019306f63f
  ABI hash: bf0494462790bedf915e923eb8189246
  export-list hash: 8576f35f5936883471d6583a26938e6b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: eae0d767a605a19e5069ad8c86e956bc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.Bull{Main.Fools Main.Twoo}
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         base-4.9.0.0:Text.Show.Functions
         checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Checkers
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck a3636f7c6b928d0bf1ca94109fdc4fa1
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Arbitrary ebeb363c254e09a95bc38189596e006a
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Gen b854ab98b52aa080829ce767bd10e775
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Checkers e0d1fc6bb6d597797528565b2c321b44
import  -/  checkers-0.4.6@checkers-0.4.6-3FKOYAS90lTBM95J5H2HRi:Test.QuickCheck.Classes 6ba475dbb1cdf27b6e28fda28d649d94
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull :: Test.QuickCheck.Arbitrary.Arbitrary Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fArbitraryBull_$carbitrary
                  Main.$fArbitraryBull_$s$dmshrink -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull6
                   Main.$fArbitraryBull2) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
                   Main.$fArbitraryBull3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull))) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Twoo) -}
2252c3e4fdb0590e69e059dcf7e391a4
  $fArbitraryBull5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen Main.Bull)
  {- HasNoCafRefs,
     Unfolding: ((Main.$fArbitraryBull5,
                  Main.$fArbitraryBull7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Bull>_R)))) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.Fools) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull_$carbitrary :: Test.QuickCheck.Gen.Gen Main.Bull
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ Main.Bull
                   Main.$fArbitraryBull1) -}
d0dd3addf5a303259926448413bcb538
  $fArbitraryBull_$s$dmshrink :: Main.Bull -> [Main.Bull]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: Main.Bull) -> GHC.Types.[] @ Main.Bull) -}
d0dd3addf5a303259926448413bcb538
  $fEqBull :: GHC.Classes.Eq Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull Main.$fEqBull_$c== Main.$fEqBull_$c/= -}
d0dd3addf5a303259926448413bcb538
  $fEqBull_$c/= :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Bull) (b :: Main.Bull) ->
                 case a of wild {
                   Main.Fools
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True }
                   Main.Twoo
                   -> case b of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False } }) -}
d0dd3addf5a303259926448413bcb538
  $fEqBull_$c== :: Main.Bull -> Main.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) ->
                 case ds of wild {
                   Main.Fools
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.True Main.Twoo -> GHC.Types.False }
                   Main.Twoo
                   -> case ds1 of wild1 {
                        Main.Fools -> GHC.Types.False Main.Twoo -> GHC.Types.True } }) -}
d0dd3addf5a303259926448413bcb538
  $fEqPropBull :: Test.QuickCheck.Checkers.EqProp Main.Bull
  DFunId
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fEqPropBull_$c=-=
                  `cast`
                (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <Main.Bull>_N)) -}
d0dd3addf5a303259926448413bcb538
  $fEqPropBull_$c=-= ::
    Main.Bull -> Main.Bull -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (a1 :: Main.Bull) (a' :: Main.Bull) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case a1 of wild {
                             Main.Fools
                             -> case a' of wild1 {
                                  Main.Fools -> Test.QuickCheck.Property.succeeded
                                  Main.Twoo -> Test.QuickCheck.Property.counterexample9 }
                             Main.Twoo
                             -> case a' of wild1 {
                                  Main.Fools -> Test.QuickCheck.Property.counterexample9
                                  Main.Twoo -> Test.QuickCheck.Property.succeeded } })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
d0dd3addf5a303259926448413bcb538
  $fMonoidBull :: GHC.Base.Monoid Main.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.Fools
                  Main.$fMonoidBull_$cmappend
                  Main.$fMonoidBull_$cmconcat -}
d0dd3addf5a303259926448413bcb538
  $fMonoidBull_$cmappend :: Main.Bull -> Main.Bull -> Main.Bull
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Bull) (ds1 :: Main.Bull) -> Main.Fools) -}
d0dd3addf5a303259926448413bcb538
  $fMonoidBull_$cmconcat :: [Main.Bull] -> Main.Bull
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Main.Bull]) ->
                 case eta of wild { DEFAULT -> Main.Fools }) -}
d0dd3addf5a303259926448413bcb538
  $fShowBull :: GHC.Show.Show Main.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bull
                  Main.$fShowBull_$cshowsPrec
                  Main.$fShowBull_$cshow
                  Main.$fShowBull_$cshowList -}
d0dd3addf5a303259926448413bcb538
  $fShowBull1 :: Main.Bull -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Bull) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
811bae448d1034de29bd53ebfc3861a1
  $fShowBull2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Twoo"#) -}
cc4cd724d35d3e829732239a603b3dbe
  $fShowBull3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fools"#) -}
d0dd3addf5a303259926448413bcb538
  $fShowBull_$cshow :: Main.Bull -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bull) ->
                 case x of wild {
                   Main.Fools -> Main.$fShowBull3 Main.Twoo -> Main.$fShowBull2 }) -}
d0dd3addf5a303259926448413bcb538
  $fShowBull_$cshowList :: [Main.Bull] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Bull Main.$fShowBull1) -}
d0dd3addf5a303259926448413bcb538
  $fShowBull_$cshowsPrec ::
    GHC.Types.Int -> Main.Bull -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Bull)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull3)
                        eta
                   Main.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBull2)
                        eta }) -}
6ecf17f6d1d1b69b0d6da4a80f1735da
  $tc'Fools :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14565306985209851106##
                   6455718131687022603##
                   Main.$trModule
                   Main.$tc'Fools1) -}
a5897e5dad86f82a6927abf8c15052dd
  $tc'Fools1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fools"#) -}
ece3996b77a8d4e37267a1e07fb36001
  $tc'Twoo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3854190919114193164##
                   11957892805415704562##
                   Main.$trModule
                   Main.$tc'Twoo1) -}
7bb8434c03ea1b490b56a4bdadbaec48
  $tc'Twoo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Twoo"#) -}
a7347b6b60adf91d3b22db8427b29384
  $tcBull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11498039343873913311##
                   9999654944972621690##
                   Main.$trModule
                   Main.$tcBull1) -}
0d68b6fd348a37f419a6778a4bae5bb1
  $tcBull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bull"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d0dd3addf5a303259926448413bcb538
  data Bull = Fools | Twoo
8141148b54d670e9569a352ffaa5ab4a
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9772f38b092f9262f2d325fd045aa955
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Checkers.quickBatch1 Main.main2) -}
6fe062428130f2a2dee0c50316cfe654
  main2 :: Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Main.main3 Main.Twoo) -}
6afcaaef5b552af883cdf99e886a8642
  main3 :: Main.Bull -> Test.QuickCheck.Checkers.TestBatch
  {- Unfolding: (Test.QuickCheck.Classes.monoid
                   @ Main.Bull
                   Main.$fMonoidBull
                   Main.$fShowBull
                   Main.$fArbitraryBull
                   Main.$fEqPropBull_$c=-=
                     `cast`
                   (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <Main.Bull>_N))) -}
68b5ce64a933050a92d03d3c9dbc7695
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.Bull]
  = Main.$fArbitraryBull
instance GHC.Classes.Eq [Main.Bull] = Main.$fEqBull
instance Test.QuickCheck.Checkers.EqProp [Main.Bull]
  = Main.$fEqPropBull
instance GHC.Base.Monoid [Main.Bull] = Main.$fMonoidBull
instance GHC.Show.Show [Main.Bull] = Main.$fShowBull
"SPEC/Main $dmshrink @ Bull" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               Main.Bull)
  Test.QuickCheck.Arbitrary.$dmshrink @ Main.Bull $dArbitrary
  = Main.$fArbitraryBull_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

